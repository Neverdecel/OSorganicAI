name: Continuous Integration

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run black (code formatter check)
        run: |
          black --check --diff src/ api/ test-child/

      - name: Run flake8 (linter)
        run: |
          flake8 src/ api/ test-child/ --count --show-source --statistics

      - name: Run mypy (type checker)
        run: |
          mypy src/ --ignore-missing-imports
        continue-on-error: true  # Don't fail CI on mypy errors (for now)

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run bandit (security linter)
        run: |
          bandit -r src/ api/ test-child/ -ll

      - name: Run safety (dependency vulnerability check)
        run: |
          safety check --json
        continue-on-error: true  # Don't fail on known vulnerabilities

  test-mother-repo:
    name: Test Mother Repository
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run mother repo tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
        env:
          # Set dummy env vars for tests
          AI_MODEL_PROVIDER: openai
          AI_API_KEY: sk-test-dummy-key-for-ci
          GITHUB_TOKEN: ghp_test_dummy_token_for_ci
          GITHUB_REPO: test-org/test-repo
          GITHUB_WEBHOOK_SECRET: test-webhook-secret
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: mother-repo
          name: mother-repo-coverage
        continue-on-error: true

  test-child:
    name: Test Test-Child Instance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run test-child tests
        run: |
          pytest test-child/tests/ -v --cov=test-child/src --cov-report=xml --cov-report=term-missing
        env:
          # Set dummy env vars for tests
          AI_MODEL_PROVIDER: openai
          AI_API_KEY: sk-test-dummy-key-for-ci
          GITHUB_TOKEN: ghp_test_dummy_token_for_ci
          GITHUB_REPO: test-org/test-ecommerce
          GITHUB_WEBHOOK_SECRET: test-webhook-secret
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: test-child
          name: test-child-coverage
        continue-on-error: true

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-mother-repo, test-child]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run integration tests
        run: |
          pytest -m integration -v
        env:
          AI_MODEL_PROVIDER: openai
          AI_API_KEY: sk-test-dummy-key-for-ci
          GITHUB_TOKEN: ghp_test_dummy_token_for_ci
          GITHUB_REPO: test-org/test-repo
          GITHUB_WEBHOOK_SECRET: test-webhook-secret
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key

  validate-template:
    name: Validate Template Pattern
    runs-on: ubuntu-latest
    needs: [test-mother-repo, test-child]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Verify test-child inherits from mother
        run: |
          python -c "
          import sys
          from pathlib import Path
          sys.path.insert(0, str(Path.cwd()))

          # Import mother agents
          from src.agents.product_owner import ProductOwnerAgent as MotherPO
          from src.agents.developer import DeveloperAgent as MotherDev

          # Import test-child agents
          sys.path.insert(0, str(Path.cwd() / 'test-child'))
          from src.agents.product_owner import ProductOwnerAgent as ChildPO
          from src.agents.developer import DeveloperAgent as ChildDev

          # Verify inheritance
          assert issubclass(ChildPO, MotherPO), 'Child PO must inherit from Mother PO'
          assert issubclass(ChildDev, MotherDev), 'Child Dev must inherit from Mother Dev'

          # Verify specialization (child has domain context)
          child_po = ChildPO.__new__(ChildPO)
          child_dev = ChildDev.__new__(ChildDev)

          po_context = child_po.get_domain_context()
          dev_context = child_dev.get_domain_context()

          assert len(po_context) > 0, 'Child PO must have domain context'
          assert len(dev_context) > 0, 'Child Dev must have domain context'

          assert 'ecommerce' in po_context.lower() or 'inventory' in po_context.lower(), 'PO context must be e-commerce'
          assert 'fastapi' in dev_context.lower() or 'stripe' in dev_context.lower(), 'Dev context must specify tech stack'

          print('✅ Template pattern validation passed!')
          print(f'✅ Child PO has {len(po_context)} chars of e-commerce context')
          print(f'✅ Child Dev has {len(dev_context)} chars of tech stack context')
          "

  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [lint, security, test-mother-repo, test-child, test-integration, validate-template]
    if: always()

    steps:
      - name: Check CI results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Linting failed"
            exit 1
          fi
          if [ "${{ needs.test-mother-repo.result }}" != "success" ]; then
            echo "❌ Mother repo tests failed"
            exit 1
          fi
          if [ "${{ needs.test-child.result }}" != "success" ]; then
            echo "❌ Test-child tests failed"
            exit 1
          fi
          if [ "${{ needs.validate-template.result }}" != "success" ]; then
            echo "❌ Template validation failed"
            exit 1
          fi
          echo "✅ All CI checks passed!"
